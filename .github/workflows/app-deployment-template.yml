name: App Deployment Template

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      skip_build:
        required: false
        description: "Skip Docker Build"
        type: boolean
        default: false
    secrets:
      VAULT_ADDR:
        required: true
      VAULT_ROLE_ID:
        required: true
      VAULT_SECRET_ID:
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ inputs.app_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    if: |
      !inputs.skip_build &&
      !contains(github.event.head_commit.message, 'skip build')
    permissions: write-all
    runs-on: ubicloud-standard-16
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Setup pnpm cache (shared across all apps)
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/pnpm/store/v3
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Prepare build
        id: prepare
        run: |
          echo "SANITIZED_REF=$(echo "${GITHUB_REF##*/}" | tr '/' '-')" >> $GITHUB_ENV

      - id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: docker/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_NAME=${{ inputs.app_name }}
            TURBO_API=${{ vars.TURBO_API }}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
          tags: |
            ghcr.io/renlabs-dev/${{ inputs.app_name }}:${{ steps.commit.outputs.short }}
            ghcr.io/renlabs-dev/${{ inputs.app_name }}:${{ env.SANITIZED_REF }}

  clean-stale:
    runs-on: ubicloud-standard-2
    container:
      image: ghcr.io/renlabs-dev/devops-ci:latest

    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}

    steps:
      - name: Setup Kubernetes authentication
        run: /apps/k8s_auth_w_approle_sa.sh

      - name: Set environment variables
        run: |
          echo "ENV_NAME=${{ github.ref_name == 'main' && 'prod' || 'dev' }}" >> $GITHUB_ENV

      - name: Clean stale releases
        run: |
          /apps/clean_stale_releases.sh torus-${ENV_NAME}-web-apps

  deploy:
    needs: [docker-build, clean-stale]
    if: |
      always() &&
      (needs.clean-stale.result == 'success') &&
      (needs.docker-build.result == 'success' || needs.docker-build.result == 'skipped')
    runs-on: ubicloud-standard-2
    container:
      image: ghcr.io/renlabs-dev/devops-ci:latest

    env:
      VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      VAULT_ROLE_ID: ${{ secrets.VAULT_ROLE_ID }}
      VAULT_SECRET_ID: ${{ secrets.VAULT_SECRET_ID }}
      APP_NAME: ${{ inputs.app_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Kubernetes authentication
        run: /apps/k8s_auth_w_approle_sa.sh

      - name: Add and update Helm repositories
        run: |
          helm repo add renlabs https://charts.renlabs.dev/
          helm repo update

      - id: commit
        uses: prompt/actions-commit-hash@v3

      - name: Set environment variables
        run: |
          echo "ENV_NAME=${{ github.ref_name == 'main' && 'prod' || 'dev' }}" >> $GITHUB_ENV
          echo "NAMESPACE=torus-${{ github.ref_name == 'main' && 'prod' || 'dev' }}-web-apps" >> $GITHUB_ENV

      - name: Install shared resources
        run: |
          helm template torus-${ENV_NAME}-aux \
            -f helm/values-utils.yaml \
            -n ${NAMESPACE} \
            --set environmentName=${ENV_NAME} \
            renlabs/utils | kubectl apply -f -

      - name: Deploy application (new tag)
        id: deploy-new
        if: needs.docker-build.result == 'success'
        working-directory: apps/${{ env.APP_NAME }}
        run: |
          helmfile sync -e ${ENV_NAME} --set deployment.image.tag=${{ steps.commit.outputs.short }}

      - name: Install helm diff plugin
        if: needs.docker-build.result == 'skipped'
        working-directory: apps/${{ env.APP_NAME }}
        run: |
          if ! helm plugin list | grep -q '^diff'; then
            helm plugin install https://github.com/databus23/helm-diff
          fi

      - name: Deploy application (apply diff only)
        id: deploy-diff
        if: needs.docker-build.result == 'skipped'
        working-directory: apps/${{ env.APP_NAME }}
        run: |
          export RELEASE_NAME="$(helmfile -e ${ENV_NAME} list --output json | jq -r '.[].name')"
          export IMAGE_TAG="$(helm get values "${RELEASE_NAME}" -n "${NAMESPACE}" --output json | jq -r '.deployment.image.tag')"

          # Temporarily disable error handling
          set +e
          helmfile diff -e ${ENV_NAME} --set deployment.image.tag=${IMAGE_TAG} --detailed-exitcode
          DIFF_EXIT_CODE=$?

          # Re-enable error handling
          set -eo pipefail

          if [ "$DIFF_EXIT_CODE" == "0" ]; then
            echo "No changes detected, skipping sync"
            echo "changes_applied=false" >> $GITHUB_OUTPUT
          elif [ "$DIFF_EXIT_CODE" == "2" ]; then
            echo "Changes detected, applying updates..."
            helmfile sync -e ${ENV_NAME} --set deployment.image.tag=${IMAGE_TAG}
            echo "changes_applied=true" >> $GITHUB_OUTPUT
          else
            echo "Error running helmfile diff with exit code: $DIFF_EXIT_CODE"
            exit 1
          fi

      - name: Generate deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary - ${{ inputs.app_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Environment info
          echo "**Environment:** ${{ env.ENV_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Namespace:** \`${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Docker build status
          if [ "${{ needs.docker-build.result }}" == "success" ]; then
            echo "### 🐳 Docker Build" >> $GITHUB_STEP_SUMMARY
            echo "✅ New image built and pushed" >> $GITHUB_STEP_SUMMARY
            echo "- **Image Tag:** \`${{ steps.commit.outputs.short }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.docker-build.result }}" == "skipped" ]; then
            echo "### 🐳 Docker Build" >> $GITHUB_STEP_SUMMARY
            echo "⏭️ Build skipped (existing image reused)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Deployment status
          echo "### 🏗️ Kubernetes Deployment" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.deploy-new.outcome }}" == "success" ]; then
            echo "✅ **Application deployed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** New version deployed" >> $GITHUB_STEP_SUMMARY
            echo "- **Image:** \`ghcr.io/renlabs-dev/${{ inputs.app_name }}:${{ steps.commit.outputs.short }}\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.deploy-new.outcome }}" == "skipped" ]; then
            echo "⏭️ **Tag deployment skipped**" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** No new image built" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.deploy-diff.outcome }}" == "success" ]; then
            if [ "${{ steps.deploy-diff.outputs.changes_applied }}" == "true" ]; then
              echo "✅ **Configuration changes applied**" >> $GITHUB_STEP_SUMMARY
              echo "- **Status:** Helm configuration updated" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No changes needed**" >> $GITHUB_STEP_SUMMARY
              echo "- **Status:** Application already up to date" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Deployment failed**" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** Deployment or configuration issues" >> $GITHUB_STEP_SUMMARY
            echo "- **Action:** Check deployment logs" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
